version: '3.8'

services:
  # Backend API Service
  backend:
    build: 
      context: ./backend
      dockerfile: Dockerfile
    container_name: secure_backend
    restart: unless-stopped
    ports:
      - "8000:8000"
    environment:
      - APP_SECRET_KEY=${APP_SECRET_KEY:-your-super-secret-key-change-this-in-production}
      - ENVIRONMENT=${ENVIRONMENT:-development}
      - HOST=${HOST:-0.0.0.0}
      - PORT=${PORT:-8000}
      - LOG_LEVEL=${LOG_LEVEL:-info}
    volumes:
      - backend_logs:/app/logs
      - backend_certs:/app/certs
    networks:
      - secure_network
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8000/health"]
      interval: 30s
      timeout: 10s
      retries: 5
      start_period: 40s
    deploy:
      resources:
        limits:
          memory: 512M
          cpus: '0.5'
        reservations:
          memory: 256M
          cpus: '0.25'

  # Frontend React App
  frontend:
    build:
      context: ./frontend
      dockerfile: Dockerfile
    container_name: secure_frontend
    restart: unless-stopped
    ports:
      - "3000:80"
    environment:
      - VITE_API_BASE_URL=${VITE_API_BASE_URL:-http://localhost:8000}
      - VITE_ENCRYPTION_KEY=${VITE_ENCRYPTION_KEY:-your-frontend-encryption-key}
      - VITE_APP_NAME=${VITE_APP_NAME:-Secure Fullstack App}
      - VITE_APP_VERSION=${VITE_APP_VERSION:-1.0.0}
    volumes:
      - frontend_logs:/var/log/nginx
    networks:
      - secure_network
    depends_on:
      - backend
    healthcheck:
      test: ["CMD", "wget", "--no-verbose", "--tries=1", "--spider", "http://localhost:80/"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 40s
    deploy:
      resources:
        limits:
          memory: 256M
          cpus: '0.25'
        reservations:
          memory: 128M
          cpus: '0.1'

  # Reverse Proxy with SSL
  nginx:
    image: nginx:alpine
    container_name: secure_nginx
    restart: unless-stopped
    ports:
      - "80:80"
      - "443:443"
    volumes:
      - ./nginx/nginx.conf:/etc/nginx/nginx.conf:ro
      - ./certs:/etc/nginx/certs:ro
      - nginx_logs:/var/log/nginx
      - nginx_cache:/var/cache/nginx
    networks:
      - secure_network
    depends_on:
      - frontend
      - backend
    healthcheck:
      test: ["CMD", "wget", "--no-verbose", "--tries=1", "--spider", "http://localhost:80/"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 40s
    deploy:
      resources:
        limits:
          memory: 128M
          cpus: '0.1'
        reservations:
          memory: 64M
          cpus: '0.05'

  # Redis for session storage (optional, for production)
  redis:
    image: redis:7-alpine
    container_name: secure_redis
    restart: unless-stopped
    command: redis-server --appendonly yes --requirepass ${REDIS_PASSWORD:-your-redis-password}
    volumes:
      - redis_data:/data
    networks:
      - secure_network
    healthcheck:
      test: ["CMD", "redis-cli", "--raw", "incr", "ping"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 40s
    deploy:
      resources:
        limits:
          memory: 128M
          cpus: '0.1'
        reservations:
          memory: 64M
          cpus: '0.05'

  # Database for persistent storage (optional, for production)
  postgres:
    image: postgres:15-alpine
    container_name: secure_postgres
    restart: unless-stopped
    environment:
      - POSTGRES_DB=${POSTGRES_DB:-secure_app}
      - POSTGRES_USER=${POSTGRES_USER:-secure_user}
      - POSTGRES_PASSWORD=${POSTGRES_PASSWORD:-your-postgres-password}
    volumes:
      - postgres_data:/var/lib/postgresql/data
    networks:
      - secure_network
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U ${POSTGRES_USER:-secure_user} -d ${POSTGRES_DB:-secure_app}"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 40s
    deploy:
      resources:
        limits:
          memory: 256M
          cpus: '0.25'
        reservations:
          memory: 128M
          cpus: '0.1'

# Networks
networks:
  secure_network:
    driver: bridge
    ipam:
      config:
        - subnet: 172.20.0.0/16

# Volumes
volumes:
  backend_logs:
    driver: local
  backend_certs:
    driver: local
  frontend_logs:
    driver: local
  nginx_logs:
    driver: local
  nginx_cache:
    driver: local
  redis_data:
    driver: local
  postgres_data:
    driver: local
